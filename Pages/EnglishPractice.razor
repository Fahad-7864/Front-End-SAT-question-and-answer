@page "/english-practice"
@inject IWebHostEnvironment Environment
@using System.Text.Json
@using System.Text

<h3>English Practice</h3>

@if (DateTime.Now >= testStartTime && DateTime.Now <= testEndTime)
{
    if (!userTestStartTime.HasValue)
    {
        StartTest();
    }

    if (!IsTestTimeExceeded())
    {
        if (questions != null && questions.Any())
        {
            <div class="question-container">
                <p>@questions[currentQuestionIndex].QuestionText</p>
                @foreach (var option in questions[currentQuestionIndex].Options)
                {
                    <div>
                        <input type="checkbox" id="@option.Key" name="answer" @onchange="(e) => HandleCheckboxChange(e, option.Key)" />
                        <label for="@option.Key">@option.Value</label>
                    </div>
                }

                <button @onclick="SubmitAnswer">Submit Answer</button>
                @if (!string.IsNullOrEmpty(feedbackMessage))
                {
                    <p class="feedback-message">@feedbackMessage</p>
                    <button @onclick="MoveToNextQuestion">Next Question</button>
                }

                @if (currentQuestionIndex >= questions.Count)
                {
                    <button @onclick="DisplayResults">Show Results</button>
                }

                <div class="score-display">
                    <pre>@GetScoreDisplay()</pre>
                </div>

                <div class="col-md-4">
                    <h4>Question Navigation</h4>
                    <div class="calendar-grid-container">
                        @for (int i = 1; i <= 20; i++)
                        {
                            <div class="calendar-grid-item">@i</div>
                        }
                    </div>
                </div>
            </div>
        }
        else
        {
            <p>Loading questions...</p>
        }
    }
    else
    {
        <p>Your time for the test has expired.</p>
    }
}
else
{
    <p>The test is not currently available. Please come back later.</p>
}


@code {
    private DateTime testStartTime = new DateTime(2024, 01, 15, 21, 45, 00);
    private DateTime testEndTime;
    private DateTime? userTestStartTime = null;



    private List<EnglishQuestion> questions = new List<EnglishQuestion>();
    private int currentQuestionIndex = 0;
    private string feedbackMessage = string.Empty;
    private List<string> selectedAnswers = new List<string>();
    private List<QuizResult> quizResults = new List<QuizResult>();

    // Method to load questions from a JSON file
    protected override async Task OnInitializedAsync()
    {
        testEndTime = testStartTime.AddHours(1); // Initialize testEndTime here

        DateTime now = DateTime.Now;
        if (now >= testStartTime && now <= testEndTime)
        {
            var filePath = Path.Combine(Environment.WebRootPath, "englishPracticeQuestions.json");
            var json = await File.ReadAllTextAsync(filePath);
            try
            {
                questions = JsonSerializer.Deserialize<List<EnglishQuestion>>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            }
            catch (JsonException ex)
            {
                Console.WriteLine("JsonException occurred while deserializing: " + ex.Message);
            }
        }
        else
        {
            questions = new List<EnglishQuestion>();
        }
    }

    private void StartTest()
    {
        if (!userTestStartTime.HasValue)
        {
            userTestStartTime = DateTime.Now;
        }
    }

    private bool IsTestTimeExceeded()
    {
        if (userTestStartTime.HasValue)
        {
            return DateTime.Now > userTestStartTime.Value.AddMinutes(30);
        }
        return false;
    }


    /*
     * The SubmitAnswer method is responsible for checking whether the user's selected answers match the correct answer for the current question.
     * It first verifies if a correct answer is provided for the question. If not, an error is logged, and the method exits.
     * The method then proceeds to combine the user's selected answers (gathered from the HandleCheckboxChange method) into a single string.
     * This combination involves joining the selected answers together, considering multiple selections, and sorting them alphabetically.
     * The combined string of user-selected answers is then compared to the correct answer from the JSON file at the current question index.
     * StringComparison.OrdinalIgnoreCase is used for comparison, making it case-insensitive. Future versions may change this behavior.
     * Based on this comparison, a feedback message is set to either 'Correct!' or 'Incorrect. Try again!'
     */
    private void SubmitAnswer()
    {
        // Check if there is a correct answer for the current question
        if (string.IsNullOrEmpty(questions[currentQuestionIndex].CorrectAnswer))
        {
            Console.WriteLine("Error: No correct answer provided for the question.");
            return;
        }

        // Combine selected answers and compare with the correct answer
        string combinedSelectedAnswers = string.Join("", selectedAnswers.OrderBy(a => a));
        bool isCorrect = combinedSelectedAnswers.Equals(questions[currentQuestionIndex].CorrectAnswer, StringComparison.OrdinalIgnoreCase);

        // Update feedback message based on whether the answer is correct or not
        if (isCorrect)
        {
            feedbackMessage = "Correct!";
        }
        else
        {
            // If incorrect, show the correct answer in the feedback
            feedbackMessage = $"Incorrect. The correct answer is: {questions[currentQuestionIndex].CorrectAnswer}.";
        }

        // Find if there's an existing result for the current question
        var existingResult = quizResults.FirstOrDefault(q => q.QuestionId == questions[currentQuestionIndex].Id);

        if (existingResult != null)
        {
            // Increment attempts if the question has been answered before
            existingResult.Attempts++;
            existingResult.IsCorrect = isCorrect; // Update the correctness
        }
        else
        {
            // Add a new result for first attempt
            quizResults.Add(new QuizResult
                {
                    QuestionId = questions[currentQuestionIndex].Id,
                    UserAnswer = combinedSelectedAnswers,
                    IsCorrect = isCorrect
                });
        }

        // Can move to the next question here 
        // MoveToNextQuestion();
    }



 
    /*
     * The HandleCheckboxChange method is designed to keep track of which options a user has selected in a quiz.
     *  When a user clicks on a checkbox, this method is triggered. It then determines whether the checkbox was checked or unchecked. 
     * If the checkbox is checked, the corresponding option (like "a", "b", etc.) is added to a list named selectedAnswers. 
     *  This list keeps a record of all the options the user has chosen.
     *  if a user unchecks a box, the corresponding option is removed from this list.
     *  This method is solely responsible for tracking the user's selections and 
     
     */
    private void HandleCheckboxChange(ChangeEventArgs e, string optionKey)
    {
        // Update the list of selected answers based on checkbox state
        if (bool.TryParse(e.Value?.ToString(), out bool isChecked) && isChecked)
        {
            if (!selectedAnswers.Contains(optionKey))
            {
                selectedAnswers.Add(optionKey);
            }
        }
        else
        {
            selectedAnswers.Remove(optionKey);
        }
    }

    // Method to move to the next question in the quiz
    private void MoveToNextQuestion()
    {
        // Increment the question index and reset states for the next question
        currentQuestionIndex++;
        if (currentQuestionIndex >= questions.Count)
        {
            currentQuestionIndex = 0; 
        }

        selectedAnswers.Clear(); 
        feedbackMessage = string.Empty; 
    }

    private void DisplayResults()
{
    // Count the number of correct answers
    int correctAnswersCount = quizResults.Count(result => result.IsCorrect);

    // Display the count of correct answers
    Console.WriteLine($"You got {correctAnswersCount} out of {questions.Count} questions correct!");

    // Optionally, display detailed results for each question
    foreach (var result in quizResults)
    {
        var question = questions.FirstOrDefault(q => q.Id == result.QuestionId);
        if (question != null)
        {
            string status = result.IsCorrect ? "Correct" : "Incorrect";
            Console.WriteLine($"Question: {question.QuestionText} - Your Answer: {result.UserAnswer} - {status}");
        }
    }
}


    private string GetScoreDisplay()
    {
        // Initialize a StringBuilder, which is good for concatenating strings in a loop.
        StringBuilder scoreBuilder = new StringBuilder();
        foreach (var question in questions)
        {
            // Try to find a result in 'quizResults' for the current question.
            var result = quizResults.FirstOrDefault(q => q.QuestionId == question.Id);
            if (result != null)
            {
                // If a result exists, append a line to 'scoreBuilder' with the question ID,
                scoreBuilder.AppendLine($"Question {question.Id}: {(result.IsCorrect ? 1 : 0)}/{result.Attempts}");
            }
            else
            {
                scoreBuilder.AppendLine($"Question {question.Id}: Not Attempted");
            }
        }
        return scoreBuilder.ToString();
    }




    // Class representing each question in the quiz
    public class EnglishQuestion
    {
        // Unique identifier for the question
        public int Id { get; set; } 
        public string QuestionText { get; set; } 
        // Using a dictionairy as an array was causing too many issues.
        public Dictionary<string, string> Options { get; set; } 
        public string CorrectAnswer { get; set; } 

    }

    public class QuizResult
    {
        public int QuestionId { get; set; }
        public string UserAnswer { get; set; }
        public bool IsCorrect { get; set; }
        public int Attempts { get; set; } = 1; // Initialize with 1 attempt by default
    }


}

<style>
    .calendar-grid-container {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 5px;
        padding: 10px;
    }

    .calendar-grid-item {
        text-align: center;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        min-height: 40px; 
    }
</style>